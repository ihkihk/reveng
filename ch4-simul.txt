3322*2222*2222*1111*1111*1100*0000*0000
1098*7654*3210*9876*5432*1098*7654*3210

edi <- 0x12345678
0001*0010*0011*0100*0101*0110*0111*1000 0x12345678 edi

# VVVV Find number of bits set in each half-nibble
edx <- edi
edx <- edx >> 1
0000*1001*0001*1010*0010*1011*0011*1100 0x091a2b3c edx

edx <- edx A 0x55555555
0000*0001*0001*0000*0000*0001*0001*0100 0x01100114 edx

edi <- edi - edx
0001*0010*0011*0100*0101*0110*0111*1000 0x12345678 edi
-
0000*0001*0001*0000*0000*0001*0001*0100 0x01100114 edx
=
0001*0001*0010*0100*0101*0101*0110*0100 0x11245564 edi
# ^^^^ Find number of bits set in each half-nibble

# VVVV Calculate the number of bits set in each nibble
eax <- edi
0001*0001*0010*0100*0101*0101*0110*0100 0x11245564 eax

edi <- edi >> 2
0000*0100*0100*1001*0001*0101*0101*1001 0x04491559 edi

eax <- eax A 0x33333333
0001*0001*0010*0000*0001*0001*0010*0000 0x11201120 eax

edi <- edi A 0x33333333
0000*0000*0000*0001*0001*0001*0001*0001 0x00011111 edi

edi <- edi + eax
0000*0000*0000*0001*0001*0001*0001*0001 0x00011111 edi
+
0001*0001*0010*0000*0001*0001*0010*0000 0x11201120 eax
=
0001*0001*0010*0001*0010*0010*0011*0001 0x11212231 edi
# ^^^^ Calculate the number of bits set in each nibble

# VVVV Calculate the number of bits set in each byte
eax <- edi
0001*0001*0010*0001*0010*0010*0011*0001 0x11212231 eax

eax <- eax >> 4
0000*0001*0001*0010*0001*0010*0010*0011 0x01121223 eax

eax <- eax + edi
0000*0001*0001*0010*0001*0010*0010*0011 0x01121223 eax
+
0001*0001*0010*0001*0010*0010*0011*0001 0x11212231 edi
=
0001*0010*0011*0011*0011*0100*0101*0100 0x12333454 eax

eax <- eax A 0x0f0f0f0f
0000*0010*0000*0011*0000*0100*0000*0100 0x02030404 eax
# ^^^^ Calculate the number of bits set in each byte

# VVVV Calculate the number of bits set in all bytes
eax <- eax * 0x01010101
|                           00000010*00000011*00000100*00000100
+
|                  00000010*00000011*00000100*00000100
+
|         00000010*00000011*00000100*00000100
+
|00000010*00000011*00000100*00000100
=
|00000010*00000101*00001001*00001101*00001011*00001000*00000100 0x00020509_0d0b0804
=
00001101*00001011*00001000*00000100 0x0d0b0804 eax

eax <- eax >> 24
 0x0000000d eax - number of bits set in the original number
# ^^^^ Calculate the number of bits set in all bytes

ret
